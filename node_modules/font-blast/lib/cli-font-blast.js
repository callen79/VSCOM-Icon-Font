#!/usr/bin/env node
"use strict";

var _gracefulFs = require("graceful-fs");

var _gracefulFs2 = _interopRequireDefault(_gracefulFs);

var _package = require("../package.json");

var _package2 = _interopRequireDefault(_package);

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.version(_package2.default.version).usage("[options] svg-font.svg outputDir").option("-i, --icons <icon-refs>", "Limit the output to the selected icons. Icons can be provided with their unicode value or the full reference", function (val) {
  return val ? val.split(",") : [];
}).option("-p, --png <heightInPx>", "Include this to generate PNG files. Please note you will need to have an executable binary in your path for 'batik-rasterizer'", parseInt).option("-c, --color <colorcode>", "Set the color of icons in the output (relevant mainly for PNG files)").parse(process.argv);

var svgFontFile = _commander2.default.args[0],
    outputDir = _commander2.default.args[1];
if (!svgFontFile || !outputDir) {
  _commander2.default.help();
}

if (!_gracefulFs2.default.existsSync(svgFontFile)) {
  console.error("This provided SVG font file does not exist");
  process.exit();
}

var config = {
  icons: _commander2.default.icons,
  png: _commander2.default.png,
  color: _commander2.default.color
};
(0, _index2.default)(svgFontFile, outputDir, config);